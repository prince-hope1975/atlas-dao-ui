/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.25.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Addr, Timestamp, Uint64, AssetInfo, Uint128, TradeState, AllCounterTradesResponse, TradeResponse, TradeInfoResponse, CounterTradeInfo, AdditionalTradeInfoResponse, Comment, Sg721Token, Cw721Coin, Coin, AllTradesResponse, ExecuteMsg, AddAssetAction, InstantiateMsg, QueryMsg, QueryFilters } from "./P2PTrading.types";
export interface P2PTradingMessage {
  contractAddress: string;
  sender: string;
  createTrade: ({
    comment,
    whitelistedUsers
  }: {
    comment?: string;
    whitelistedUsers?: string[];
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  addAsset: ({
    action,
    asset
  }: {
    action: AddAssetAction;
    asset: AssetInfo;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeAssets: ({
    assets,
    counterId,
    tradeId
  }: {
    assets: number[][];
    counterId?: number;
    tradeId: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  addWhitelistedUsers: ({
    tradeId,
    whitelistedUsers
  }: {
    tradeId: number;
    whitelistedUsers: string[];
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeWhitelistedUsers: ({
    tradeId,
    whitelistedUsers
  }: {
    tradeId: number;
    whitelistedUsers: string[];
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setComment: ({
    comment,
    counterId,
    tradeId
  }: {
    comment: string;
    counterId?: number;
    tradeId: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  addNFTsWanted: ({
    nftsWanted,
    tradeId
  }: {
    nftsWanted: string[];
    tradeId?: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeNFTsWanted: ({
    nftsWanted,
    tradeId
  }: {
    nftsWanted: string[];
    tradeId: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setNFTsWanted: ({
    nftsWanted,
    tradeId
  }: {
    nftsWanted: string[];
    tradeId?: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  flushNFTsWanted: ({
    tradeId
  }: {
    tradeId: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  addTokensWanted: ({
    tokensWanted,
    tradeId
  }: {
    tokensWanted: AssetInfo[];
    tradeId?: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeTokensWanted: ({
    tokensWanted,
    tradeId
  }: {
    tokensWanted: AssetInfo[];
    tradeId: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setTokensWanted: ({
    tokensWanted,
    tradeId
  }: {
    tokensWanted: AssetInfo[];
    tradeId?: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  flushTokensWanted: ({
    tradeId
  }: {
    tradeId: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setTradePreview: ({
    action,
    asset
  }: {
    action: AddAssetAction;
    asset: AssetInfo;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  confirmTrade: ({
    tradeId
  }: {
    tradeId?: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  suggestCounterTrade: ({
    comment,
    tradeId
  }: {
    comment?: string;
    tradeId: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  confirmCounterTrade: ({
    counterId,
    tradeId
  }: {
    counterId?: number;
    tradeId: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  acceptTrade: ({
    comment,
    counterId,
    tradeId
  }: {
    comment?: string;
    counterId: number;
    tradeId: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  cancelTrade: ({
    tradeId
  }: {
    tradeId: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  cancelCounterTrade: ({
    counterId,
    tradeId
  }: {
    counterId: number;
    tradeId: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  refuseCounterTrade: ({
    counterId,
    tradeId
  }: {
    counterId: number;
    tradeId: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  reviewCounterTrade: ({
    comment,
    counterId,
    tradeId
  }: {
    comment?: string;
    counterId: number;
    tradeId: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  withdrawPendingAssets: ({
    tradeId,
    trader
  }: {
    tradeId: number;
    trader: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  withdrawAllFromTrade: ({
    tradeId
  }: {
    tradeId: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  withdrawAllFromCounter: ({
    counterId,
    tradeId
  }: {
    counterId: number;
    tradeId: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setNewOwner: ({
    owner
  }: {
    owner: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setNewFeeContract: ({
    feeContract
  }: {
    feeContract: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class P2PTradingMessageComposer implements P2PTradingMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createTrade = this.createTrade.bind(this);
    this.addAsset = this.addAsset.bind(this);
    this.removeAssets = this.removeAssets.bind(this);
    this.addWhitelistedUsers = this.addWhitelistedUsers.bind(this);
    this.removeWhitelistedUsers = this.removeWhitelistedUsers.bind(this);
    this.setComment = this.setComment.bind(this);
    this.addNFTsWanted = this.addNFTsWanted.bind(this);
    this.removeNFTsWanted = this.removeNFTsWanted.bind(this);
    this.setNFTsWanted = this.setNFTsWanted.bind(this);
    this.flushNFTsWanted = this.flushNFTsWanted.bind(this);
    this.addTokensWanted = this.addTokensWanted.bind(this);
    this.removeTokensWanted = this.removeTokensWanted.bind(this);
    this.setTokensWanted = this.setTokensWanted.bind(this);
    this.flushTokensWanted = this.flushTokensWanted.bind(this);
    this.setTradePreview = this.setTradePreview.bind(this);
    this.confirmTrade = this.confirmTrade.bind(this);
    this.suggestCounterTrade = this.suggestCounterTrade.bind(this);
    this.confirmCounterTrade = this.confirmCounterTrade.bind(this);
    this.acceptTrade = this.acceptTrade.bind(this);
    this.cancelTrade = this.cancelTrade.bind(this);
    this.cancelCounterTrade = this.cancelCounterTrade.bind(this);
    this.refuseCounterTrade = this.refuseCounterTrade.bind(this);
    this.reviewCounterTrade = this.reviewCounterTrade.bind(this);
    this.withdrawPendingAssets = this.withdrawPendingAssets.bind(this);
    this.withdrawAllFromTrade = this.withdrawAllFromTrade.bind(this);
    this.withdrawAllFromCounter = this.withdrawAllFromCounter.bind(this);
    this.setNewOwner = this.setNewOwner.bind(this);
    this.setNewFeeContract = this.setNewFeeContract.bind(this);
  }

  createTrade = ({
    comment,
    whitelistedUsers
  }: {
    comment?: string;
    whitelistedUsers?: string[];
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_trade: {
            comment,
            whitelisted_users: whitelistedUsers
          }
        })),
        funds
      })
    };
  };
  addAsset = ({
    action,
    asset
  }: {
    action: AddAssetAction;
    asset: AssetInfo;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add_asset: {
            action,
            asset
          }
        })),
        funds
      })
    };
  };
  removeAssets = ({
    assets,
    counterId,
    tradeId
  }: {
    assets: number[][];
    counterId?: number;
    tradeId: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_assets: {
            assets,
            counter_id: counterId,
            trade_id: tradeId
          }
        })),
        funds
      })
    };
  };
  addWhitelistedUsers = ({
    tradeId,
    whitelistedUsers
  }: {
    tradeId: number;
    whitelistedUsers: string[];
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add_whitelisted_users: {
            trade_id: tradeId,
            whitelisted_users: whitelistedUsers
          }
        })),
        funds
      })
    };
  };
  removeWhitelistedUsers = ({
    tradeId,
    whitelistedUsers
  }: {
    tradeId: number;
    whitelistedUsers: string[];
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_whitelisted_users: {
            trade_id: tradeId,
            whitelisted_users: whitelistedUsers
          }
        })),
        funds
      })
    };
  };
  setComment = ({
    comment,
    counterId,
    tradeId
  }: {
    comment: string;
    counterId?: number;
    tradeId: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_comment: {
            comment,
            counter_id: counterId,
            trade_id: tradeId
          }
        })),
        funds
      })
    };
  };
  addNFTsWanted = ({
    nftsWanted,
    tradeId
  }: {
    nftsWanted: string[];
    tradeId?: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add_n_f_ts_wanted: {
            nfts_wanted: nftsWanted,
            trade_id: tradeId
          }
        })),
        funds
      })
    };
  };
  removeNFTsWanted = ({
    nftsWanted,
    tradeId
  }: {
    nftsWanted: string[];
    tradeId: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_n_f_ts_wanted: {
            nfts_wanted: nftsWanted,
            trade_id: tradeId
          }
        })),
        funds
      })
    };
  };
  setNFTsWanted = ({
    nftsWanted,
    tradeId
  }: {
    nftsWanted: string[];
    tradeId?: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_n_f_ts_wanted: {
            nfts_wanted: nftsWanted,
            trade_id: tradeId
          }
        })),
        funds
      })
    };
  };
  flushNFTsWanted = ({
    tradeId
  }: {
    tradeId: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          flush_n_f_ts_wanted: {
            trade_id: tradeId
          }
        })),
        funds
      })
    };
  };
  addTokensWanted = ({
    tokensWanted,
    tradeId
  }: {
    tokensWanted: AssetInfo[];
    tradeId?: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add_tokens_wanted: {
            tokens_wanted: tokensWanted,
            trade_id: tradeId
          }
        })),
        funds
      })
    };
  };
  removeTokensWanted = ({
    tokensWanted,
    tradeId
  }: {
    tokensWanted: AssetInfo[];
    tradeId: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_tokens_wanted: {
            tokens_wanted: tokensWanted,
            trade_id: tradeId
          }
        })),
        funds
      })
    };
  };
  setTokensWanted = ({
    tokensWanted,
    tradeId
  }: {
    tokensWanted: AssetInfo[];
    tradeId?: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_tokens_wanted: {
            tokens_wanted: tokensWanted,
            trade_id: tradeId
          }
        })),
        funds
      })
    };
  };
  flushTokensWanted = ({
    tradeId
  }: {
    tradeId: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          flush_tokens_wanted: {
            trade_id: tradeId
          }
        })),
        funds
      })
    };
  };
  setTradePreview = ({
    action,
    asset
  }: {
    action: AddAssetAction;
    asset: AssetInfo;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_trade_preview: {
            action,
            asset
          }
        })),
        funds
      })
    };
  };
  confirmTrade = ({
    tradeId
  }: {
    tradeId?: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          confirm_trade: {
            trade_id: tradeId
          }
        })),
        funds
      })
    };
  };
  suggestCounterTrade = ({
    comment,
    tradeId
  }: {
    comment?: string;
    tradeId: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          suggest_counter_trade: {
            comment,
            trade_id: tradeId
          }
        })),
        funds
      })
    };
  };
  confirmCounterTrade = ({
    counterId,
    tradeId
  }: {
    counterId?: number;
    tradeId: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          confirm_counter_trade: {
            counter_id: counterId,
            trade_id: tradeId
          }
        })),
        funds
      })
    };
  };
  acceptTrade = ({
    comment,
    counterId,
    tradeId
  }: {
    comment?: string;
    counterId: number;
    tradeId: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          accept_trade: {
            comment,
            counter_id: counterId,
            trade_id: tradeId
          }
        })),
        funds
      })
    };
  };
  cancelTrade = ({
    tradeId
  }: {
    tradeId: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          cancel_trade: {
            trade_id: tradeId
          }
        })),
        funds
      })
    };
  };
  cancelCounterTrade = ({
    counterId,
    tradeId
  }: {
    counterId: number;
    tradeId: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          cancel_counter_trade: {
            counter_id: counterId,
            trade_id: tradeId
          }
        })),
        funds
      })
    };
  };
  refuseCounterTrade = ({
    counterId,
    tradeId
  }: {
    counterId: number;
    tradeId: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          refuse_counter_trade: {
            counter_id: counterId,
            trade_id: tradeId
          }
        })),
        funds
      })
    };
  };
  reviewCounterTrade = ({
    comment,
    counterId,
    tradeId
  }: {
    comment?: string;
    counterId: number;
    tradeId: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          review_counter_trade: {
            comment,
            counter_id: counterId,
            trade_id: tradeId
          }
        })),
        funds
      })
    };
  };
  withdrawPendingAssets = ({
    tradeId,
    trader
  }: {
    tradeId: number;
    trader: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          withdraw_pending_assets: {
            trade_id: tradeId,
            trader
          }
        })),
        funds
      })
    };
  };
  withdrawAllFromTrade = ({
    tradeId
  }: {
    tradeId: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          withdraw_all_from_trade: {
            trade_id: tradeId
          }
        })),
        funds
      })
    };
  };
  withdrawAllFromCounter = ({
    counterId,
    tradeId
  }: {
    counterId: number;
    tradeId: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          withdraw_all_from_counter: {
            counter_id: counterId,
            trade_id: tradeId
          }
        })),
        funds
      })
    };
  };
  setNewOwner = ({
    owner
  }: {
    owner: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_new_owner: {
            owner
          }
        })),
        funds
      })
    };
  };
  setNewFeeContract = ({
    feeContract
  }: {
    feeContract: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_new_fee_contract: {
            fee_contract: feeContract
          }
        })),
        funds
      })
    };
  };
}