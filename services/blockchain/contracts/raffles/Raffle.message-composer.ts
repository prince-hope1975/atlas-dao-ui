/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.25.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Decimal, InstantiateMsg, ExecuteMsg, AssetInfo, Uint128, Timestamp, Uint64, Binary, Cw721Coin, Sg721Token, Coin, RaffleOptionsMsg, Cw721ReceiveMsg, DrandRandomness, QueryMsg, QueryFilters, Addr, RaffleState, AllRafflesResponse, RaffleResponse, RaffleInfo, RaffleOptions, Randomness, ArrayOfString, ContractInfo, OwnerStruct, Uint32 } from "./Raffle.types";
export interface RaffleMessage {
  contractAddress: string;
  sender: string;
  createRaffle: ({
    assets,
    owner,
    raffleOptions,
    raffleTicketPrice
  }: {
    assets: AssetInfo[];
    owner?: string;
    raffleOptions: RaffleOptionsMsg;
    raffleTicketPrice: AssetInfo;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  cancelRaffle: ({
    raffleId
  }: {
    raffleId: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  modifyRaffle: ({
    raffleId,
    raffleOptions,
    raffleTicketPrice
  }: {
    raffleId: number;
    raffleOptions: RaffleOptionsMsg;
    raffleTicketPrice?: AssetInfo;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  buyTicket: ({
    raffleId,
    sentAssets,
    ticketNumber
  }: {
    raffleId: number;
    sentAssets: AssetInfo;
    ticketNumber: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  receive: ({
    msg,
    sender,
    tokenId
  }: {
    msg: Binary;
    sender: string;
    tokenId: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  claimNft: ({
    raffleId
  }: {
    raffleId: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateRandomness: ({
    raffleId,
    randomness
  }: {
    raffleId: number;
    randomness: DrandRandomness;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  toggleLock: ({
    lock
  }: {
    lock: boolean;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  changeParameter: ({
    parameter,
    value
  }: {
    parameter: string;
    value: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  claimOwnership: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class RaffleMessageComposer implements RaffleMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createRaffle = this.createRaffle.bind(this);
    this.cancelRaffle = this.cancelRaffle.bind(this);
    this.modifyRaffle = this.modifyRaffle.bind(this);
    this.buyTicket = this.buyTicket.bind(this);
    this.receive = this.receive.bind(this);
    this.claimNft = this.claimNft.bind(this);
    this.updateRandomness = this.updateRandomness.bind(this);
    this.toggleLock = this.toggleLock.bind(this);
    this.changeParameter = this.changeParameter.bind(this);
    this.claimOwnership = this.claimOwnership.bind(this);
  }

  createRaffle = ({
    assets,
    owner,
    raffleOptions,
    raffleTicketPrice
  }: {
    assets: AssetInfo[];
    owner?: string;
    raffleOptions: RaffleOptionsMsg;
    raffleTicketPrice: AssetInfo;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_raffle: {
            assets,
            owner,
            raffle_options: raffleOptions,
            raffle_ticket_price: raffleTicketPrice
          }
        })),
        funds
      })
    };
  };
  cancelRaffle = ({
    raffleId
  }: {
    raffleId: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          cancel_raffle: {
            raffle_id: raffleId
          }
        })),
        funds
      })
    };
  };
  modifyRaffle = ({
    raffleId,
    raffleOptions,
    raffleTicketPrice
  }: {
    raffleId: number;
    raffleOptions: RaffleOptionsMsg;
    raffleTicketPrice?: AssetInfo;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          modify_raffle: {
            raffle_id: raffleId,
            raffle_options: raffleOptions,
            raffle_ticket_price: raffleTicketPrice
          }
        })),
        funds
      })
    };
  };
  buyTicket = ({
    raffleId,
    sentAssets,
    ticketNumber
  }: {
    raffleId: number;
    sentAssets: AssetInfo;
    ticketNumber: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          buy_ticket: {
            raffle_id: raffleId,
            sent_assets: sentAssets,
            ticket_number: ticketNumber
          }
        })),
        funds
      })
    };
  };
  receive = ({
    msg,
    sender,
    tokenId
  }: {
    msg: Binary;
    sender: string;
    tokenId: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          receive: {
            msg,
            sender,
            token_id: tokenId
          }
        })),
        funds
      })
    };
  };
  claimNft = ({
    raffleId
  }: {
    raffleId: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          claim_nft: {
            raffle_id: raffleId
          }
        })),
        funds
      })
    };
  };
  updateRandomness = ({
    raffleId,
    randomness
  }: {
    raffleId: number;
    randomness: DrandRandomness;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_randomness: {
            raffle_id: raffleId,
            randomness
          }
        })),
        funds
      })
    };
  };
  toggleLock = ({
    lock
  }: {
    lock: boolean;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          toggle_lock: {
            lock
          }
        })),
        funds
      })
    };
  };
  changeParameter = ({
    parameter,
    value
  }: {
    parameter: string;
    value: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          change_parameter: {
            parameter,
            value
          }
        })),
        funds
      })
    };
  };
  claimOwnership = (funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          claim_ownership: {}
        })),
        funds
      })
    };
  };
}