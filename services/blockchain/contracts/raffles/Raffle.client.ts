/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.25.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Decimal, InstantiateMsg, ExecuteMsg, AssetInfo, Uint128, Timestamp, Uint64, Binary, Cw721Coin, Sg721Token, Coin, RaffleOptionsMsg, Cw721ReceiveMsg, DrandRandomness, QueryMsg, QueryFilters, Addr, RaffleState, AllRafflesResponse, RaffleResponse, RaffleInfo, RaffleOptions, Randomness, ArrayOfString, ContractInfo, OwnerStruct, Uint32 } from "./Raffle.types";
export interface RaffleReadOnlyInterface {
  contractAddress: string;
  contractInfo: () => Promise<ContractInfo>;
  raffleInfo: ({
    raffleId
  }: {
    raffleId: number;
  }) => Promise<RaffleResponse>;
  allRaffles: ({
    filters,
    limit,
    startAfter
  }: {
    filters?: QueryFilters;
    limit?: number;
    startAfter?: number;
  }) => Promise<AllRafflesResponse>;
  allTickets: ({
    limit,
    raffleId,
    startAfter
  }: {
    limit?: number;
    raffleId: number;
    startAfter?: number;
  }) => Promise<ArrayOfString>;
  ticketNumber: ({
    owner,
    raffleId
  }: {
    owner: string;
    raffleId: number;
  }) => Promise<Uint32>;
}
export class RaffleQueryClient implements RaffleReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.contractInfo = this.contractInfo.bind(this);
    this.raffleInfo = this.raffleInfo.bind(this);
    this.allRaffles = this.allRaffles.bind(this);
    this.allTickets = this.allTickets.bind(this);
    this.ticketNumber = this.ticketNumber.bind(this);
  }

  contractInfo = async (): Promise<ContractInfo> => {
    return this.client.queryContractSmart(this.contractAddress, {
      contract_info: {}
    });
  };
  raffleInfo = async ({
    raffleId
  }: {
    raffleId: number;
  }): Promise<RaffleResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      raffle_info: {
        raffle_id: raffleId
      }
    });
  };
  allRaffles = async ({
    filters,
    limit,
    startAfter
  }: {
    filters?: QueryFilters;
    limit?: number;
    startAfter?: number;
  }): Promise<AllRafflesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_raffles: {
        filters,
        limit,
        start_after: startAfter
      }
    });
  };
  allTickets = async ({
    limit,
    raffleId,
    startAfter
  }: {
    limit?: number;
    raffleId: number;
    startAfter?: number;
  }): Promise<ArrayOfString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_tickets: {
        limit,
        raffle_id: raffleId,
        start_after: startAfter
      }
    });
  };
  ticketNumber = async ({
    owner,
    raffleId
  }: {
    owner: string;
    raffleId: number;
  }): Promise<Uint32> => {
    return this.client.queryContractSmart(this.contractAddress, {
      ticket_number: {
        owner,
        raffle_id: raffleId
      }
    });
  };
}
export interface RaffleInterface extends RaffleReadOnlyInterface {
  contractAddress: string;
  sender: string;
  createRaffle: ({
    assets,
    owner,
    raffleOptions,
    raffleTicketPrice
  }: {
    assets: AssetInfo[];
    owner?: string;
    raffleOptions: RaffleOptionsMsg;
    raffleTicketPrice: AssetInfo;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  cancelRaffle: ({
    raffleId
  }: {
    raffleId: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  modifyRaffle: ({
    raffleId,
    raffleOptions,
    raffleTicketPrice
  }: {
    raffleId: number;
    raffleOptions: RaffleOptionsMsg;
    raffleTicketPrice?: AssetInfo;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  buyTicket: ({
    raffleId,
    sentAssets,
    ticketNumber
  }: {
    raffleId: number;
    sentAssets: AssetInfo;
    ticketNumber: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  receive: ({
    msg,
    sender,
    tokenId
  }: {
    msg: Binary;
    sender: string;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  claimNft: ({
    raffleId
  }: {
    raffleId: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateRandomness: ({
    raffleId,
    randomness
  }: {
    raffleId: number;
    randomness: DrandRandomness;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  toggleLock: ({
    lock
  }: {
    lock: boolean;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  changeParameter: ({
    parameter,
    value
  }: {
    parameter: string;
    value: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  claimOwnership: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class RaffleClient extends RaffleQueryClient implements RaffleInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createRaffle = this.createRaffle.bind(this);
    this.cancelRaffle = this.cancelRaffle.bind(this);
    this.modifyRaffle = this.modifyRaffle.bind(this);
    this.buyTicket = this.buyTicket.bind(this);
    this.receive = this.receive.bind(this);
    this.claimNft = this.claimNft.bind(this);
    this.updateRandomness = this.updateRandomness.bind(this);
    this.toggleLock = this.toggleLock.bind(this);
    this.changeParameter = this.changeParameter.bind(this);
    this.claimOwnership = this.claimOwnership.bind(this);
  }

  createRaffle = async ({
    assets,
    owner,
    raffleOptions,
    raffleTicketPrice
  }: {
    assets: AssetInfo[];
    owner?: string;
    raffleOptions: RaffleOptionsMsg;
    raffleTicketPrice: AssetInfo;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_raffle: {
        assets,
        owner,
        raffle_options: raffleOptions,
        raffle_ticket_price: raffleTicketPrice
      }
    }, fee, memo, funds);
  };
  cancelRaffle = async ({
    raffleId
  }: {
    raffleId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      cancel_raffle: {
        raffle_id: raffleId
      }
    }, fee, memo, funds);
  };
  modifyRaffle = async ({
    raffleId,
    raffleOptions,
    raffleTicketPrice
  }: {
    raffleId: number;
    raffleOptions: RaffleOptionsMsg;
    raffleTicketPrice?: AssetInfo;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      modify_raffle: {
        raffle_id: raffleId,
        raffle_options: raffleOptions,
        raffle_ticket_price: raffleTicketPrice
      }
    }, fee, memo, funds);
  };
  buyTicket = async ({
    raffleId,
    sentAssets,
    ticketNumber
  }: {
    raffleId: number;
    sentAssets: AssetInfo;
    ticketNumber: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      buy_ticket: {
        raffle_id: raffleId,
        sent_assets: sentAssets,
        ticket_number: ticketNumber
      }
    }, fee, memo, funds);
  };
  receive = async ({
    msg,
    sender,
    tokenId
  }: {
    msg: Binary;
    sender: string;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        msg,
        sender,
        token_id: tokenId
      }
    }, fee, memo, funds);
  };
  claimNft = async ({
    raffleId
  }: {
    raffleId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_nft: {
        raffle_id: raffleId
      }
    }, fee, memo, funds);
  };
  updateRandomness = async ({
    raffleId,
    randomness
  }: {
    raffleId: number;
    randomness: DrandRandomness;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_randomness: {
        raffle_id: raffleId,
        randomness
      }
    }, fee, memo, funds);
  };
  toggleLock = async ({
    lock
  }: {
    lock: boolean;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      toggle_lock: {
        lock
      }
    }, fee, memo, funds);
  };
  changeParameter = async ({
    parameter,
    value
  }: {
    parameter: string;
    value: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      change_parameter: {
        parameter,
        value
      }
    }, fee, memo, funds);
  };
  claimOwnership = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_ownership: {}
    }, fee, memo, funds);
  };
}