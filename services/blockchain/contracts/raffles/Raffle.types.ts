/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.25.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Decimal = string;
export interface InstantiateMsg {
  drand_url?: string | null;
  fee_addr?: string | null;
  max_participant_number?: number | null;
  minimum_raffle_duration?: number | null;
  minimum_raffle_timeout?: number | null;
  name: string;
  owner?: string | null;
  raffle_fee?: Decimal | null;
  rand_fee?: Decimal | null;
  random_pubkey: string;
  verify_signature_contract: string;
  [k: string]: unknown;
}
export type ExecuteMsg = {
  create_raffle: {
    assets: AssetInfo[];
    owner?: string | null;
    raffle_options: RaffleOptionsMsg;
    raffle_ticket_price: AssetInfo;
  };
} | {
  cancel_raffle: {
    raffle_id: number;
  };
} | {
  modify_raffle: {
    raffle_id: number;
    raffle_options: RaffleOptionsMsg;
    raffle_ticket_price?: AssetInfo | null;
  };
} | {
  buy_ticket: {
    raffle_id: number;
    sent_assets: AssetInfo;
    ticket_number: number;
  };
} | {
  receive: Cw721ReceiveMsg;
} | {
  claim_nft: {
    raffle_id: number;
  };
} | {
  update_randomness: {
    raffle_id: number;
    randomness: DrandRandomness;
  };
} | {
  toggle_lock: {
    lock: boolean;
  };
} | {
  change_parameter: {
    parameter: string;
    value: string;
  };
} | {
  claim_ownership: {};
};
export type AssetInfo = {
  cw721_coin: Cw721Coin;
} | {
  sg721_token: Sg721Token;
} | {
  coin: Coin;
};
export type Uint128 = string;
export type Timestamp = Uint64;
export type Uint64 = string;
export type Binary = string;
export interface Cw721Coin {
  address: string;
  token_id: string;
  [k: string]: unknown;
}
export interface Sg721Token {
  address: string;
  token_id: string;
  [k: string]: unknown;
}
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export interface RaffleOptionsMsg {
  comment?: string | null;
  max_participant_number?: number | null;
  max_ticket_per_address?: number | null;
  raffle_duration?: number | null;
  raffle_preview?: number | null;
  raffle_start_timestamp?: Timestamp | null;
  raffle_timeout?: number | null;
  [k: string]: unknown;
}
export interface Cw721ReceiveMsg {
  msg: Binary;
  sender: string;
  token_id: string;
}
export interface DrandRandomness {
  previous_signature: Binary;
  round: number;
  signature: Binary;
}
export type QueryMsg = {
  contract_info: {};
} | {
  raffle_info: {
    raffle_id: number;
  };
} | {
  all_raffles: {
    filters?: QueryFilters | null;
    limit?: number | null;
    start_after?: number | null;
  };
} | {
  all_tickets: {
    limit?: number | null;
    raffle_id: number;
    start_after?: number | null;
  };
} | {
  ticket_number: {
    owner: string;
    raffle_id: number;
  };
};
export interface QueryFilters {
  contains_token?: string | null;
  owner?: string | null;
  states?: string[] | null;
  ticket_depositor?: string | null;
}
export type Addr = string;
export type RaffleState = "created" | "started" | "closed" | "finished" | "claimed" | "cancelled";
export interface AllRafflesResponse {
  raffles: RaffleResponse[];
  [k: string]: unknown;
}
export interface RaffleResponse {
  raffle_id: number;
  raffle_info?: RaffleInfo | null;
  raffle_state: RaffleState;
}
export interface RaffleInfo {
  assets: AssetInfo[];
  is_cancelled: boolean;
  number_of_tickets: number;
  owner: Addr;
  raffle_options: RaffleOptions;
  raffle_ticket_price: AssetInfo;
  randomness?: Randomness | null;
  winner?: Addr | null;
  [k: string]: unknown;
}
export interface RaffleOptions {
  comment?: string | null;
  max_participant_number?: number | null;
  max_ticket_per_address?: number | null;
  raffle_duration: number;
  raffle_preview: number;
  raffle_start_timestamp: Timestamp;
  raffle_timeout: number;
  [k: string]: unknown;
}
export interface Randomness {
  randomness: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number];
  randomness_owner: Addr;
  randomness_round: number;
  [k: string]: unknown;
}
export type ArrayOfString = string[];
export interface ContractInfo {
  drand_url: string;
  fee_addr: Addr;
  last_raffle_id?: number | null;
  lock: boolean;
  minimum_raffle_duration: number;
  minimum_raffle_timeout: number;
  name: string;
  owner: OwnerStruct;
  raffle_fee: Decimal;
  rand_fee: Decimal;
  random_pubkey: Binary;
  verify_signature_contract: Addr;
  [k: string]: unknown;
}
export interface OwnerStruct {
  new_owner?: Addr | null;
  owner: Addr;
}
export type Uint32 = number;